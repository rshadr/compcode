#!/bin/sh

# Copyright 2024 Adrien Ricciardi
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal 
# in the Software without restriction, including without limitation the rights
# to  use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

# Customize here
cxxflags='-Wall -pedantic'

tcol_info="\x1b[1;33m"
tcol_error="\x1b[1;31m"
tcol_output="\x1b[1;32m"
tcol_input="\x1b[1;36m"
tcol_reset="\x1b[0m"

## Input/Output
io_info() {
  printf "$tcol_info>>$tcol_reset "
  echo "$@"
}

io_error() {
  printf "$tcol_error>>$tcol_reset "
  echo "$@"
}

io_out() {
  printf "$tcol_output>>$tcol_reset "
  echo -n "$@"
}

io_outln() {
  io_out "$@"
  printf "\n"
}

io_in() {
  printf "$tcol_input<<$tcol_reset "
  read -r $1
}


## Utilities
first_word() {
  echo -n "$1" | head -n1 | cut -d " " -f1
}

just_args() {
  echo -n "$1" | cut -d' ' -f2-
}

check_if_modified_since() {
  # $1: URL
  # $2: local file
  local_timestamp=`date -r "$2"`
  http_status=`curl -s -o /dev/null -w '%{http_code}' "$1" -H "If-Modified-Since: $local_timestamp"`

  return [ "$http_status" -ne 304 ];
}

## CodeForces
cf_greet() {
  false
}

cf_help() {
  if [ -z "$2" ]; then
    io_info "CodeForces Session General Help"
    io_info "  help [command] : learn usage of a command"
    io_info "  statement <prob_code> : view statement for problem"
    io_info "  solve <prob_code> : write code for problem"
    return
  fi

  case "$2" in
    *) io_info "No help available for requested term"
  esac
}

cf_statement() {
  if [ -z "$2" ] || !(echo -n "$2" | grep -Eq '[1-9][0-9]*[A-Z][1-9]?'); then
    io_info "Need a valid problem number"
    return
  fi

  contest_id=`echo -n $2 | sed -r 's/^([1-9][0-9]*).+/\1/'`
  index=`echo -n $2 | sed -r 's/.+([A-Z][1-9]?)$/\1/'`

  problem_url="https://codeforces.com/problemset/problem/$contest_id/$index"
  contest_dir="$g_basedir/statements/$contest_id"
  mkdir -p "$contest_dir"

  if [ ! -d "$contest_dir/$index.html" ] || [ "$(http_codereq $problem_url)" -ne 304 ]; then
    io_info "Downloading statement"
    curl -s -o "$contest_dir/$index.html" "$problem_url"
  fi

  w3m -T text/html "$contest_dir/$index.html"
}

cf_solve() {
  # $2 : Problem code
  if [ -z "$2" ] || !(echo -n "$2" | grep -Eq '[1-9][0-9]*[A-Z][1-9]?'); then
    io_info "Need a valid problem number"
    return
  fi

  contest_id=`echo -n $2 | sed -r 's/^([1-9][0-9]*).+/\1/'`
  index=`echo -n $2 | sed -r 's/.+([A-Z][1-9]?)$/\1/'`

  contest_dir="$g_basedir/code/$contest_id"

  if [ ! -d "$contest_dir" ]; then
    io_info "No code folder for contest $contest_id, creating new"
    mkdir -p "$contest_dir"
  fi

  existing_solutions=`ls -1 $contest_dir | grep -E --color=never "$index\..+"`

  chosen_solution=`printf "$existing_solutions\nNew Solution" | fzy`
  effective_solution=''

  if [ "$chosen_solution" = "New Solution" ]; then
    effective_solution="$contest_dir/$index.cpp"
  else
    effective_solution="$chosen_solution"
  fi

  $EDITOR "$effective_solution"
}

cf_compile() {
  # $2 : Problem code
  if [ -z "$2" ] || !(echo -n "$2" | grep -Eq '[1-9][0-9]*[A-Z][1-9]?'); then
    io_info "Need a valid problem number"
    return
  fi

  contest_id=`echo -n $2 | sed -r 's/^([1-9][0-9]*).+/\1/'`
  index=`echo -n $2 | sed -r 's/.+([A-Z][1-9]?)$/\1/'`

  contest_code_dir="$g_basedir/code/$contest_id"
  contest_bin_dir="$g_basedir/bin/$contest_id"

  echo "$contest_bin_dir"

  if [ ! -d "$contest_bin_dir" ]; then
    io_info "No binary folder for contest $contest_id, creating new"
    mkdir -p "$contest_bin_dir"
  fi

  existing_solutions=`ls -1 $contest_code_dir/$index.*`

  if [ -z "$existing_solutions" ]; then
    io_info "No solutions for $2"
    return
  fi

  effective_solution=`echo $existing_solutions | fzy`
  effective_binary="$contest_bin_dir/$index"

  case "$effective_solution" in
    *.cpp|*.cxx|*.c++) g++ -o "$effective_binary" $cxxflags "$effective_solution" ;;
    *) io_info "Programming language unsupported" ;;
  esac && io_info "Successfully compiled"
}

cf_test() {
  # $2 : Problem code
  if [ -z "$2" ] || !(echo -n "$2" | grep -Eq '[1-9][0-9]*[A-Z][1-9]?'); then
    io_info "Need a valid problem number"
    return
  fi

  contest_id=`echo -n $2 | sed -r 's/^([1-9][0-9]*).+/\1/'`
  index=`echo -n $2 | sed -r 's/.+([A-Z][1-9]?)$/\1/'`

  contest_bin_dir="$g_basedir/bin/$contest_id"
  effective_binary="$contest_bin_dir/$index"

  if [ ! -f "$effective_binary" ]; then
    io_info "No binaries for problem $contest_id$index"
    return
  fi

  "$effective_binary"
  io_info "Done"
}

## Internals
handle_sigint() {
  g_running=0
}

## Global variables
g_running=1
g_basedir=""

## Setup
setup() {
  io_info "CodeForces session started $(date --rfc-3339=seconds)"
  io_info "Copyright 2024 Adrien Ricciardi - See source for license details"

  if [ -z "$XDG_DATA_HOME" ]; then
    export XDG_DATA_HOME="$HOME/.local/share"
  fi

  g_basedir="$XDG_DATA_HOME/codeforces"

  if [ ! -d "$g_basedir" ]; then
    mkdir -p "$g_basedir"
    io_info "Created base directory $g_basedir"
  fi

  if [ ! -d "$g_basedir/statements" ]; then
    mkdir -p "$g_basedir/statements"
    io_info "Created statements directory $g_basedir/statements"
  fi

  if [ ! -d "$g_basedir/code" ]; then
    mkdir -p "$g_basedir/code"
    io_info "Created code directory $g_basedir/statements"
  fi

  if [ ! -d "$g_basedir/bin" ]; then
    mkdir -p "$g_basedir/bin"
    io_info "Created binary directory $g_basedir/bin"
  fi

  trap 'handle_sigint' 2

  cf_greet

  g_running=1
}


## Cleanup
cleanup() {
  io_info "Ending session"
}

## Main Loop
repl() {
  cmd_argv=""

  while [[ $g_running -eq 1 ]] ; do
    io_in cmd_argv

    case "$(first_word $cmd_argv)" in
      "") printf "\n" ;;
      "help") cf_help $cmd_argv ;;
      "statement") cf_statement $cmd_argv ;;
      "solve") cf_solve $cmd_argv ;;
      "compile") cf_compile $cmd_argv ;;
      "test") cf_test $cmd_argv ;;
      "exit") g_running=0 ;;
      *) io_info "Invalid action: \"$cmd_argv\"" ;;
    esac

  done
}

setup
repl
cleanup

